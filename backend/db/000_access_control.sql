CREATE SCHEMA authsystem;

-- CREATE TABLE STATEMENTS
-- static
DROP TABLE IF EXISTS authsystem."Role" CASCADE;
CREATE TABLE authsystem."Role" (
	"role_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
	"role_name" text NOT NULL,
	"locked" boolean NOT NULL default TRUE,
	PRIMARY KEY ("role_id")
);

INSERT INTO authsystem."Role" ("role_id", "role_name", "locked") VALUES
(1, 'admin', true),
(2, 'user', false)
;

-- static
DROP TABLE IF EXISTS authsystem."PermissionGroup" CASCADE;
CREATE TABLE authsystem."PermissionGroup" (
	"permission_group_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
	"permission_group_name" text NOT NULL,
	PRIMARY KEY ("permission_group_id"),
	CONSTRAINT permission_group_permission_group_name_key UNIQUE ("permission_group_name")
);

INSERT INTO authsystem."PermissionGroup" ("permission_group_id", "permission_group_name") VALUES
(1, 'internal');


-- static
DROP TABLE IF EXISTS authsystem."Permission" CASCADE;
CREATE TABLE authsystem."Permission" (
	"permission_id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
	"permission_key" text NOT NULL,
	"permission_group_id" int4 NULL,
	PRIMARY KEY ("permission_id"),
	CONSTRAINT app_permission_permission_key_key UNIQUE ("permission_key"),
	CONSTRAINT permission_permission_group_id_fkey FOREIGN KEY ("permission_group_id") REFERENCES authsystem."PermissionGroup"(permission_group_id)
);

INSERT INTO authsystem."Permission" ("permission_id", "permission_key", "permission_group_id") VALUES
(1, 'admin', 1),
(2, 'users_can_view_user_list', 1),
(3, 'users_can_create_user', 1),
(4, 'users_can_edit_other_users', 1),
(5, 'roles_can_view_role_list', 1),
(6, 'roles_can_create_edit_role', 1);

-- dynamic
DROP TABLE IF EXISTS authsystem."User" CASCADE;
CREATE TABLE authsystem."User" (
	"id" INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),
    "username" varchar(255) NOT NULL, 
	"email" varchar(255) NOT NULL,
	"first_name" varchar(255) NULL,
	"last_name" varchar(255) NULL,
	"enabled" boolean NOT NULL,
    "welcome_message" varchar NULL,
	"language" varchar(255) NOT NULL DEFAULT 'EN'::character varying,
	"pw_hash" varchar(255) NOT NULL,
	"pw_reset_required" bool NOT NULL DEFAULT true,
	"role_id" int4 NULL,
	PRIMARY KEY ("username"),
	CONSTRAINT user_id_unique_key UNIQUE ("id"),
	CONSTRAINT user_role_id_fkey FOREIGN KEY ("role_id") REFERENCES authsystem."Role"("role_id")
);

INSERT INTO authsystem."User" ("username", "email", "first_name", "last_name", "enabled",  "pw_hash", "pw_reset_required", "role_id") VALUES
('test.user','mail@test.hr', 'Test', 'User', true, '$pbkdf2-sha256$29000$6p2zVspZa60VAoAQgrBWCg$woNK5HMjQzvVDUOyAVDF/479qCHP/Xx/903qDEV.usY', true, 2 ),
('admin','admin@test.com', 'Admin', 'Admin', true, '$pbkdf2-sha256$29000$6p2zVspZa60VAoAQgrBWCg$woNK5HMjQzvVDUOyAVDF/479qCHP/Xx/903qDEV.usY', false, 1 );

-- static
DROP TABLE IF EXISTS authsystem."RolesPermissions" CASCADE;
CREATE TABLE authsystem."RolesPermissions" (
	"role_id" int4 NOT NULL,
	"permission_id" int4 NOT NULL,
	CONSTRAINT roles_permissions_permission_id_pkey PRIMARY KEY ("role_id", "permission_id"),
	CONSTRAINT roles_permissions_permission_id_fkey FOREIGN KEY ("permission_id") REFERENCES authsystem."Permission"("permission_id") ON DELETE CASCADE,
	CONSTRAINT roles_permissions_role_id_fkey FOREIGN KEY ("role_id") REFERENCES authsystem."Role"("role_id") ON DELETE CASCADE
);

-- everything allowed for user and admin for now
INSERT INTO authsystem."RolesPermissions" ("role_id", "permission_id") VALUES
(1, 1),
(1, 2),
(1, 3),
(1, 4),
(1, 5),
(1, 6),
(2, 2),
(2, 3),
(2, 4),
(2, 5),
(2, 6);